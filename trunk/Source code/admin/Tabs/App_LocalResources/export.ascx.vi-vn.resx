<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plFolder.Text" xml:space="preserve">
    <value>Thư mục:</value>
  </data>
  <data name="plFolder.Help" xml:space="preserve">
    <value>Chọn thư mục để lưu file mẫu</value>
  </data>
  <data name="plFile.Text" xml:space="preserve">
    <value>Tên Mẫu:</value>
  </data>
  <data name="plFile.Help" xml:space="preserve">
    <value>Nhập tên cho Mẫu Trang</value>
  </data>
  <data name="cmdExport.Text" xml:space="preserve">
    <value>Xuất</value>
  </data>
  <data name="ControlTitle_exporttab.Text" xml:space="preserve">
    <value>Xuất Trang</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Xuất Trang&lt;/h1&gt;&lt;p&gt;Administrators có thể xuất nội dung của một trang.&lt;/p&gt;</value>
  </data>
  <data name="Error.Text" xml:space="preserve">
    <value>Một lỗi đã xảy ra trong quá trình xuất</value>
  </data>
  <data name="Validation.Text" xml:space="preserve">
    <value>Bạn phải xác định một thư mục và tên mẫu để xuất nội dung.</value>
  </data>
  <data name="Root.Text" xml:space="preserve">
    <value>Gốc</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>Nhập một mô tả cho mẫu.</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Mô Tả:</value>
  </data>
  <data name="plContent.Help" xml:space="preserve">
    <value>Chọn để gộp nội dung module</value>
  </data>
  <data name="plContent.Text" xml:space="preserve">
    <value>Gộp Nội Dung:</value>
  </data>
  <data name="ExportedMessage.Text" xml:space="preserve">
    <value>Mẫu Trang đã được tạo ở &lt;b&gt;{0}&lt;/b&gt;</value>
  </data>
  <data name="valDescription.ErrorMessage" xml:space="preserve">
    <value>Bạn cần phải đưa ra một mô tả cho mẫu.</value>
  </data>
  <data name="plAllModules.Help">
    <value>Chọn để gộp những module đã được cấu hình để hiển thị trên tất cả các trang. Lưu ý: nếu bạn chọn lựa chọn này, sau đó sử dụng mẫu này để tạo một trang mới trên cùng một site, những module này có thể sẽ được đưa vào trang hai lần: một lần từ mẫu được nhập và một lần khi trang được tạo.</value>
  </data>
  <data name="plAllModules.Text">
    <value>Gộp các module được hiển thị trên tất cả các trang?</value>
  </data>
</root>