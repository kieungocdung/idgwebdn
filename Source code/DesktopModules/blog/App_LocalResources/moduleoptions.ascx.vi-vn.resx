<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblSearchBlogComment.Text">
    <value>Gộp Bình Luận</value>
  </data>
  <data name="Listitem2.Text">
    <value>Blog Đơn</value>
  </data>
  <data name="lblRecentRssEntriesMax.Help">
    <value>Bạn có thể giới hạn số mục RSS cho Danh sách mục mới.</value>
  </data>
  <data name="secGeneralSettings.Text">
    <value>Thiết Lập Cơ Bản</value>
  </data>
  <data name="lblUploadOption.Text">
    <value>Cho Phép Tải Lên:</value>
  </data>
  <data name="lblRecentEntriesMax.Help">
    <value>Bạn có thể giới hạn số mục cho danh sách mục mới nhất.</value>
  </data>
  <data name="lblRecentRssEntriesMax.Text">
    <value>Giới Hạn số RSS:</value>
  </data>
  <data name="lblSearchSummary.Text">
    <value>Giới Hạn Tóm Tắt Tìm Kiếm:</value>
  </data>
  <data name="lblRecentEntriesMax.Text">
    <value>Giới Hạn Danh Sách Mục Mới:</value>
  </data>
  <data name="lblSummary.Help">
    <value>Nếu trường mô tả không là bắt buộc, bạn có thể sẽ muốn giới hạn độ dài mục được hiển thị trên danh sách. Như vậy một bài sẽ không choán hết diện tích của danh sách. Điều này đặc biệt quan trọng khi làm việc với blog của nhiều thành viên. Để không giới hạn, nhập giá trị "0".</value>
  </data>
  <data name="Listitem1.Text">
    <value>Nhiều Blogger</value>
  </data>
  <data name="lblSummary.Text">
    <value>Giới Hạn Tóm Tắt:</value>
  </data>
  <data name="lblPortalSearchOption.Help">
    <value>Để sử dụng tìm kiếm Portal cho nội dung Blog bạn có thể đặt nó với tùy chọn dưới đây</value>
  </data>
  <data name="lblMandatory.Text">
    <value>Bắt Buộc Mô Tả:</value>
  </data>
  <data name="lblUploadOption.Help">
    <value>Nếu bạn chọn tùy chọn này nghĩa là bạn cho phép người dùng được tải lên hình ảnh và các file đính kèm khác vào blog.</value>
  </data>
  <data name="lblMandatory.Help">
    <value>Khi nhập một mục blog, tùy chọn này buộc người dùng phải nhập một mô tả cho mục blog đó. Như vậy khi hiển thị mục trên danh sách kết quả tìm kiếm, một bản tóm tắt sẽ được hiển thị thay cho cả đoạn văn.</value>
  </data>
  <data name="lblSearchSummary.Help">
    <value>Bạn nên giới hạn số mục trả về khi tìm kiếm để các kết quả được quét nhanh hơn.</value>
  </data>
  <data name="lblShowSummary.Text">
    <value>Hiển Thị Tóm Tắt:</value>
  </data>
  <data name="lblShowSummary.Help">
    <value>Nếu chọn tùy chọn này, tóm tắt nếu có sẽ được hiển thị tren cùng của mục.</value>
  </data>
  <data name="lblPortalSearchOption.Text">
    <value>Tìm Kiếm Portal</value>
  </data>
  <data name="lblSearchBlogContent.Text">
    <value>Gộp Nội Dung</value>
  </data>
  <data name="secAdvancedSeetings.Text">
    <value>Thiết Lập Nâng Cao</value>
  </data>
  <data name="ControlTitle_moduleoptions.Text">
    <value>Các Tùy Chọn Module Blog</value>
  </data>
  <data name="ModuleHelp.Text">
    <value>&lt;h1&gt;Tùy Chọn Module Blog&lt;/h1&gt;
&lt;p&gt;...&lt;/p&gt;
        </value>
  </data>
  <data name="cmdGenerateLinks.Text">
    <value>Tạo ra tất cả Liên Kết Trực Tiếp</value>
  </data>
  <data name="ControlTitle_module_options.Text">
    <value>Tùy Chọn Module</value>
  </data>
  <data name="lblPageBlogs.Text">
    <value>Trang Blog Cá Nhân</value>
  </data>
  <data name="lblPageBlogs.Help">
    <value>Chọn blog được dùng trên trang này. Đối với trang blog chung đừng chọn một blog cụ thể</value>
  </data>
  <data name="lblEnableDNNSearch.Text">
    <value>Cho Phép Tìm Kiếm DNN</value>
  </data>
  <data name="lblEnableDNNSearch.Help">
    <value>Nếu bạn chọn tùy chọn này nội dung của module sẽ được chỉ mục đến bởi module tìm kiếm của DNN, hãy cẩn thận là bạn chỉ nên đặt tùy chọn này cho một module (trang blog chính), nếu bạn đặt tùy chọn này cho nhiều hơn 1 module bạn sẽ nhận được các kết quả trùng lặp</value>
  </data>
  <data name="lblShowUniqueTitle.Text">
    <value>Hiển thị tiêu đề riêng</value>
  </data>
  <data name="lblShowUniqueTitle.Help">
    <value>Nếu chọn tùy chọn này một tiêu đề của blog sẽ được hiển thị trên thanh tiêu đề của browser</value>
  </data>
  <data name="lblMaxImageWidth.Text">
    <value>Giới Hạn Độ Rộng Hình Ảnh:</value>
  </data>
  <data name="lblMaxImageWidth.Help">
    <value>Bạn có thể giới hạn độ rộng hình ảnh với tùy chọn này</value>
  </data>
</root>